// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OpenHRCore.Infrastructure.Data;

#nullable disable

namespace OpenHRCore.Infrastructure.Migrations
{
    [DbContext(typeof(OpenHRCoreDbContext))]
    [Migration("20241111195934_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OpenHRCore.Domain.Workforce.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("JobGradeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobLevelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobPositionId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationUnitId")
                        .HasColumnType("uuid");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobGradeId");

                    b.HasIndex("JobLevelId");

                    b.HasIndex("JobPositionId");

                    b.HasIndex("OrganizationUnitId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1c7e3fc-6646-4c1f-8d45-9e6c99f25316"),
                            Address = "123 Main St, New York",
                            Code = "EMP001",
                            CreatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769),
                            DateOfBirth = new DateOnly(1985, 5, 15),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            Gender = "Male",
                            IsActive = true,
                            IsDeleted = false,
                            JobGradeId = new Guid("93c7e3fc-6643-4c1f-8d45-9e6c99f25318"),
                            JobLevelId = new Guid("83c7e3fc-664f-4c1f-8d45-9e6c99f25318"),
                            JobPositionId = new Guid("a1c7e3fc-6644-4c1f-8d45-9e6c99f25316"),
                            LastName = "Doe",
                            OrganizationUnitId = new Guid("72c7e3fc-664b-4c1f-8d45-9e6c99f25317"),
                            Phone = "1234567890",
                            UpdatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769)
                        },
                        new
                        {
                            Id = new Guid("b2c7e3fc-6647-4c1f-8d45-9e6c99f25317"),
                            Address = "456 Oak St, New York",
                            Code = "EMP002",
                            CreatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769),
                            DateOfBirth = new DateOnly(1990, 8, 20),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            Gender = "Female",
                            IsActive = true,
                            IsDeleted = false,
                            JobGradeId = new Guid("92c7e3fc-6642-4c1f-8d45-9e6c99f25317"),
                            JobLevelId = new Guid("82c7e3fc-664e-4c1f-8d45-9e6c99f25317"),
                            JobPositionId = new Guid("a2c7e3fc-6645-4c1f-8d45-9e6c99f25317"),
                            LastName = "Smith",
                            OrganizationUnitId = new Guid("73c7e3fc-664c-4c1f-8d45-9e6c99f25318"),
                            Phone = "0987654321",
                            UpdatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769)
                        });
                });

            modelBuilder.Entity("OpenHRCore.Domain.Workforce.Entities.JobGrade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("GradeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MaxSalary")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinSalary")
                        .HasColumnType("numeric");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobGrades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91c7e3fc-6641-4c1f-8d45-9e6c99f25316"),
                            Code = "G1",
                            CreatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769),
                            Description = "Entry level grade",
                            GradeName = "Grade 1",
                            IsActive = true,
                            IsDeleted = false,
                            MaxSalary = 45000m,
                            MinSalary = 30000m,
                            SortOrder = 1,
                            UpdatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769)
                        },
                        new
                        {
                            Id = new Guid("92c7e3fc-6642-4c1f-8d45-9e6c99f25317"),
                            Code = "G2",
                            CreatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769),
                            Description = "Mid level grade",
                            GradeName = "Grade 2",
                            IsActive = true,
                            IsDeleted = false,
                            MaxSalary = 65000m,
                            MinSalary = 45001m,
                            SortOrder = 2,
                            UpdatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769)
                        },
                        new
                        {
                            Id = new Guid("93c7e3fc-6643-4c1f-8d45-9e6c99f25318"),
                            Code = "G3",
                            CreatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769),
                            Description = "Senior level grade",
                            GradeName = "Grade 3",
                            IsActive = true,
                            IsDeleted = false,
                            MaxSalary = 90000m,
                            MinSalary = 65001m,
                            SortOrder = 3,
                            UpdatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769)
                        });
                });

            modelBuilder.Entity("OpenHRCore.Domain.Workforce.Entities.JobLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobLevels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("81c7e3fc-664d-4c1f-8d45-9e6c99f25316"),
                            Code = "L1",
                            CreatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769),
                            Description = "Entry level position",
                            IsActive = true,
                            IsDeleted = false,
                            LevelName = "Entry Level",
                            SortOrder = 1,
                            UpdatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769)
                        },
                        new
                        {
                            Id = new Guid("82c7e3fc-664e-4c1f-8d45-9e6c99f25317"),
                            Code = "L2",
                            CreatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769),
                            Description = "Junior level position",
                            IsActive = true,
                            IsDeleted = false,
                            LevelName = "Junior Level",
                            SortOrder = 2,
                            UpdatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769)
                        },
                        new
                        {
                            Id = new Guid("83c7e3fc-664f-4c1f-8d45-9e6c99f25318"),
                            Code = "L3",
                            CreatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769),
                            Description = "Senior level position",
                            IsActive = true,
                            IsDeleted = false,
                            LevelName = "Senior Level",
                            SortOrder = 3,
                            UpdatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769)
                        });
                });

            modelBuilder.Entity("OpenHRCore.Domain.Workforce.Entities.JobPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationUnitId");

                    b.ToTable("JobPositions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1c7e3fc-6644-4c1f-8d45-9e6c99f25316"),
                            Code = "HRM",
                            CreatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769),
                            Description = "Human Resources Manager",
                            IsActive = true,
                            IsDeleted = false,
                            JobTitle = "HR Manager",
                            OrganizationUnitId = new Guid("72c7e3fc-664b-4c1f-8d45-9e6c99f25317"),
                            UpdatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769)
                        },
                        new
                        {
                            Id = new Guid("a2c7e3fc-6645-4c1f-8d45-9e6c99f25317"),
                            Code = "SWE",
                            CreatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769),
                            Description = "Software Engineer",
                            IsActive = true,
                            IsDeleted = false,
                            JobTitle = "Software Engineer",
                            OrganizationUnitId = new Guid("73c7e3fc-664c-4c1f-8d45-9e6c99f25318"),
                            UpdatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769)
                        });
                });

            modelBuilder.Entity("OpenHRCore.Domain.Workforce.Entities.OrganizationUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentOrganizationUnitId")
                        .HasColumnType("uuid");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentOrganizationUnitId");

                    b.ToTable("OrganizationUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71c7e3fc-664a-4c1f-8d45-9e6c99f25316"),
                            Code = "HO",
                            CreatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769),
                            Description = "Main headquarters",
                            IsActive = true,
                            IsDeleted = false,
                            Location = "New York",
                            Name = "Head Office",
                            SortOrder = 1,
                            UpdatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769)
                        },
                        new
                        {
                            Id = new Guid("72c7e3fc-664b-4c1f-8d45-9e6c99f25317"),
                            Code = "HR",
                            CreatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769),
                            Description = "HR Department",
                            IsActive = true,
                            IsDeleted = false,
                            Location = "New York",
                            Name = "Human Resources",
                            ParentOrganizationUnitId = new Guid("71c7e3fc-664a-4c1f-8d45-9e6c99f25316"),
                            SortOrder = 2,
                            UpdatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769)
                        },
                        new
                        {
                            Id = new Guid("73c7e3fc-664c-4c1f-8d45-9e6c99f25318"),
                            Code = "IT",
                            CreatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769),
                            Description = "IT Department",
                            IsActive = true,
                            IsDeleted = false,
                            Location = "New York",
                            Name = "Information Technology",
                            ParentOrganizationUnitId = new Guid("71c7e3fc-664a-4c1f-8d45-9e6c99f25316"),
                            SortOrder = 3,
                            UpdatedAt = new DateTime(2024, 11, 11, 19, 59, 33, 752, DateTimeKind.Utc).AddTicks(769)
                        });
                });

            modelBuilder.Entity("OpenHRCore.Domain.Workforce.Entities.Employee", b =>
                {
                    b.HasOne("OpenHRCore.Domain.Workforce.Entities.JobGrade", "JobGrade")
                        .WithMany()
                        .HasForeignKey("JobGradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpenHRCore.Domain.Workforce.Entities.JobLevel", "JobLevel")
                        .WithMany()
                        .HasForeignKey("JobLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpenHRCore.Domain.Workforce.Entities.JobPosition", "JobPosition")
                        .WithMany()
                        .HasForeignKey("JobPositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpenHRCore.Domain.Workforce.Entities.OrganizationUnit", "OrganizationUnit")
                        .WithMany()
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobGrade");

                    b.Navigation("JobLevel");

                    b.Navigation("JobPosition");

                    b.Navigation("OrganizationUnit");
                });

            modelBuilder.Entity("OpenHRCore.Domain.Workforce.Entities.JobPosition", b =>
                {
                    b.HasOne("OpenHRCore.Domain.Workforce.Entities.OrganizationUnit", "OrganizationUnit")
                        .WithMany("JobPositions")
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrganizationUnit");
                });

            modelBuilder.Entity("OpenHRCore.Domain.Workforce.Entities.OrganizationUnit", b =>
                {
                    b.HasOne("OpenHRCore.Domain.Workforce.Entities.OrganizationUnit", "ParentOrganizationUnit")
                        .WithMany("SubOrganizationUnits")
                        .HasForeignKey("ParentOrganizationUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentOrganizationUnit");
                });

            modelBuilder.Entity("OpenHRCore.Domain.Workforce.Entities.OrganizationUnit", b =>
                {
                    b.Navigation("JobPositions");

                    b.Navigation("SubOrganizationUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
